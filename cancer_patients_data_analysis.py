# -*- coding: utf-8 -*-
"""Cancer Patients Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uO6H6fZr53iUTUpeH5Va5WUbUTMqazU5
"""

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'cancer-patients-data:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F857298%2F1461976%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240605%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240605T123344Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D958d3ea3843369c94168f8e9280ca573b8692168730833a375ad9cd9f202e8dcc35f5fd098b62175892648b7749f5ab372c06a248358e04c372a4952dc1abba800ef53757708fbaa64b22b7d05f020b91c2b2797333076dde3677595a98529ed6515ab9392309adc8b5fdaf434df9e1f54dd247a125f96cc663150aee3edc36e71b4e0e12e162088ab5cb0adeb79a58f49db1d088a5778bd12eedd7ba63ba3052723eb6a747ea4deca31f1fa5477deeda267cb0165ea95cdb002a50f390f671822ee1562012ddf60286dddbeff99594decbde6f88f5bb578d2d0d2dd067d331f6a8afa9cfd31fed76984b455c7dda07d8a8bed18627464ed1be66b1b0a5be212'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

cancerData = pd.read_excel('/kaggle/input/cancer-patients-data/cancer patient data sets.xlsx')
cancerData.head()

cancerData.info()

cancerData.isnull().sum()

cancerData.describe()

cancerData['Level'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
cancerData['Level']=le.fit_transform(cancerData['Level'])

cancerData.head()

le.classes_

cancerData.info()

cancerDataCorr = cancerData.corr()
fig,ax = plt.subplots(figsize = (20,20))
sns.heatmap(cancerDataCorr,annot = True)

col_list = cancerData.columns
cancerData[col_list].plot(kind = 'box',subplots = 'True',layout = (7,7),figsize = (20,20))
plt.show()

Age = cancerData.Age
Q1 = np.quantile(Age,0.25)
Q3 = np.quantile(Age,0.75)
IQR = Q3-Q1
upper = Q3 + 1.5*IQR
lower = Q1 - 1.5*IQR
Outliers = []
for i in Age:
    if (i<lower or i>upper):
        Outliers.append(i)

print(Outliers)

for i in Outliers:
    cancerData.drop(cancerData[(cancerData['Age']==i)].index,inplace = True)

col_list = cancerData.columns
cancerData[col_list].plot(kind = 'box',subplots = 'True',layout = (7,7),figsize = (20,20))
plt.show()

cancerData.hist(bins = 100,figsize = (20,20))
plt.show()

cancerDataCorr['Level'].sort_values(ascending = False)

X = cancerData.drop(['Level','Patient Id'],axis=1)
y = cancerData[['Level']]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(solver='liblinear')
model.fit(X,y)

importances = pd.DataFrame(data={'Attribute': X.columns,'Importance': model.coef_[0]})
importances = importances.sort_values(by='Importance', ascending=False)

fig,ax = plt.subplots(figsize=(20,20))
plt.bar(x=importances['Attribute'], height=importances['Importance'], color='#087E8B')
plt.title('Feature importances obtained from coefficients', size=20)
plt.xticks(rotation='vertical')
plt.show()

X.columns

importantFeatures = ['Alcohol use','Fatigue','Obesity','Passive Smoker',
                     'Air Pollution','Dry Cough','Coughing of Blood','Shortness of Breath']

cancerDataNew = cancerData[importantFeatures]
cancerDataNew.head()

x_train,x_test,y_train,y_test = train_test_split(cancerDataNew,y,test_size = 0.2)

""" **Logistic Regression**"""

LogReg = LogisticRegression(solver='liblinear')
LogReg.fit(x_train,y_train)
y_pred = LogReg.predict(x_test)
y_pred_prob = LogReg.predict_proba(x_test)

from sklearn.metrics import (accuracy_score,classification_report,
confusion_matrix,precision_score,f1_score,recall_score,roc_auc_score,auc)

LogRegAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

""" **Linear Discriminant Analysis**"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
LDA = LinearDiscriminantAnalysis()
LDA.fit(x_train,y_train)
y_pred = LDA.predict(x_test)

LDA_Accuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Quadratic Discriminant Analysis**"""

from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
QDA = QuadraticDiscriminantAnalysis()
QDA.fit(x_train,y_train)
y_pred = QDA.predict(x_test)

QDA_Accuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**SGD Classifier**"""

from sklearn.linear_model import SGDClassifier
SGD = SGDClassifier()
SGD.fit(x_train,y_train)
y_pred = SGD.predict(x_test)

SGDAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Support Vector Classifier**"""

from sklearn.svm import LinearSVC
SVC = LinearSVC()
SVC.fit(x_train,y_train)
y_pred = SVC.predict(x_test)

SVCAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Radius Neighbors Classifier**"""

from sklearn.neighbors import RadiusNeighborsClassifier
RNC = RadiusNeighborsClassifier()
RNC.fit(x_train,y_train)
y_pred = RNC.predict(x_test)

RNCAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
NB = GaussianNB()
NB.fit(x_train,y_train)
y_pred = NB.predict(x_test)

NBAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
DC = DecisionTreeClassifier()
DC.fit(x_train,y_train)
y_pred = DC.predict(x_test)

DCAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier()
RF.fit(x_train,y_train)
y_pred = RF.predict(x_test)

RFAccuracy = accuracy_score(y_test,y_pred)
print("Accuracy : ",accuracy_score(y_test,y_pred),"\n")
print("Classification Report : \n",classification_report(y_test,y_pred))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_pred),"\n")
print("Precision Score : ",precision_score(y_test,y_pred,average = None),"\n")
print("Recall Score : ",recall_score(y_test,y_pred,average = None),"\n")
print("F1 Score : ",f1_score(y_test,y_pred,average = None),"\n")

print("All classifiers with their accuracy score : \n")
Classifiers = pd.DataFrame(columns = ['Classifiers','Accuracy'])
Classifiers['Classifiers'] = np.array(['Logistic Regression','Linear Discriminant Analysis',
                                       'Quadratic Discriminant Analysis','SGD Classifier',
                                      'Support Vector Classifier','Radius Neighbors Classifier',
                                      'Naive Bayes','Decision Tree Classifier',
                                      'Random Forest Classifier'])
Classifiers['Accuracy'] = np.array([LogRegAccuracy,LDA_Accuracy,QDA_Accuracy,
                                   SGDAccuracy,SVCAccuracy,RNCAccuracy,
                                   NBAccuracy,DCAccuracy,RFAccuracy])
Classifiers.sort_values(by = ['Accuracy'],ascending = False)

